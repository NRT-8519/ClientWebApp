@page "/my_requests/{UUID}"
@using Blazored.LocalStorage;
@using ClientWebApp.Components.Tables
@using ClientWebApp.DTOs;
@using ClientWebApp.Features;
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient Client
@inject ILocalStorageService localStorage
<PageTitle>My Requests</PageTitle>

<div class="container text-center justify-content-center align-items-center mt-5">
    <h4 class="display-4 mb-5">My Requests</h4>

    @if (requests == null)
    {
        <SpinnerLoader/>
    }
    else if (requests.items.Count == 0)
    {
        <h4 class="mb-4">No requests</h4>
        <AuthorizeView Roles="PATIENT">
            <Authorized>
                <div class="row col-12 mb-3">
                    <div class="col-12">
                        <a href="new_request" class="btn btn-primary w-100">Create a new request</a>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
    }
    else
    {
        <AuthorizeView Roles="PATIENT">
            <Authorized>
                <div class="row col-12 mb-3">
                    <div class="col-12">
                        <a href="new_request" class="btn btn-primary w-100">Create a new request</a>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
        <div class="row col-12 mb-3">
            <div class="col-12">
                <RequestsTable Requests="requests.items" Link="@("request_details/" + UUID)" />
            </div>
        </div>
        <div class="row col-12 mb-3 justify-content-center">
            <div class="col-1">
                <button disabled="@(!requests.HasPrevious)" type="button" @onclick="GetFirst" class="btn btn-primary w-100"><div class="bi bi-chevron-double-left"></div></button>
            </div>
            <div class="col-1">
                <button disabled="@(!requests.HasPrevious)" type="button" @onclick="GetPrevious" class="btn btn-primary w-100"><div class="bi bi-chevron-left"></div></button>
            </div>
            <div class="col-1">
                <button disabled="@(!requests.HasNext)" type="button" @onclick="GetNext" class="btn btn-primary w-100"><div class="bi bi-chevron-right"></div></button>
            </div>
            <div class="col-1">
                <button disabled="@(!requests.HasNext)" type="button" @onclick="GetLast" class="btn btn-primary w-100"><div class="bi bi-chevron-double-right"></div></button>
            </div>
        </div>
    }
</div>

@code {
    [ParameterAttribute]
    public string UUID { get; set; }

    public PaginatedResultDTO<RequestDTO> requests;

    private string Role;

    int currentPage = 1;
    int pageSize = 10;

    async Task GetFirst()
    {
        currentPage = 1;
        await GetRequests();
    }

    async Task GetLast()
    {
        currentPage = requests.TotalPages;
        await GetRequests();
    }

    async Task GetPrevious()
    {
        currentPage -= 1;
        await GetRequests();
    }

    async Task GetNext()
    {
        currentPage += 1;
        await GetRequests();
    }

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        var claims = JwtParser.ParseClaimsFromJwt(token);

        Role = claims.Single(c => c.Type.Equals("role")).Value;

        await GetRequests();
    }

    private async Task GetRequests()
    {
        requests = null;
        if (Role.Equals("DOCTOR"))
            requests = await Client.GetFromJsonAsync<PaginatedResultDTO<RequestDTO>>("api/request/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&doctor=" + UUID);
        else
            requests = await Client.GetFromJsonAsync<PaginatedResultDTO<RequestDTO>>("api/request/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&patient=" + UUID);
    }
}
