@page "/patients"
@using ClientWebApp.Components
@using ClientWebApp.DTOs;

@inject HttpClient Client

<PageTitle>Patients - Admin</PageTitle>

<div class="d-flex flex-column content text-center justify-content-center align-items-center">
    <h1 class="display-4">Patients</h1>

    @if (patients == null || patients.items.Count == 0)
    {
        <SpinnerLoader/>
    }
    else
    {
        <div class="container text-center justify-content-center">
            <div class="row col-12 mb-3">
                <div class="input-group">
                    <input type="text" class="form-control" @bind-value="@searchString" placeholder="Name, Assigned doctor's name, UUID..." aria-label="Name, Assigned doctor's name, UUID..." aria-describedby="search-button">
                    <button class="btn btn-outline-primary" @onclick="InvokeSearch" type="button" id="search-button">Search</button>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-12">
                    <a href="new_patient" class="btn btn-primary w-100">Add a new patient</a>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-12">
                    <UserTable Entity="patients.items" Link="patient_details"/>
                </div>
            </div>
            <div class="row col-12 mb-3 justify-content-center">
                <div class="col-1">
                    <button disabled="@(!patients.HasPrevious)" type="button" @onclick="GetFirst" class="btn btn-primary w-100"><div class="bi bi-chevron-double-left"></div></button>
                </div>
                <div class="col-1">
                    <button disabled="@(!patients.HasPrevious)" type="button" @onclick="GetPrevious" class="btn btn-primary w-100"><div class="bi bi-chevron-left"></div></button>
                </div>
                <div class="col-1">
                    <button disabled="@(!patients.HasNext)" type="button" @onclick="GetNext" class="btn btn-primary w-100"><div class="bi bi-chevron-right"></div></button>
                </div>
                <div class="col-1">
                    <button disabled="@(!patients.HasNext)" type="button" @onclick="GetLast" class="btn btn-primary w-100"><div class="bi bi-chevron-double-right"></div></button>
                </div>
            </div>
        </div>
        
    }
</div>

@code {
    private PaginatedResultDTO<UserBasicDTO>? patients;

    int currentPage = 1;
    int pageSize = 10;
    string searchString = "";
    string currentFilter = "";

    protected override async Task OnInitializedAsync()
    {
        //var result = await Client.GetAsync("api/users/patients/all/basic");
        patients = await Client.GetFromJsonAsync<PaginatedResultDTO<UserBasicDTO>>("api/users/patients/all/basic?pageNumber=" + currentPage + "&pageSize=" + pageSize);
    }

    async Task InvokeSearch()
    {
        currentPage = 1;
        currentFilter = searchString;
        patients = null;
        patients = await Client.GetFromJsonAsync<PaginatedResultDTO<UserBasicDTO>>("api/users/patients/all/basic?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&searchString=" + searchString);
    }

    async Task GetFirst()
    {
        currentPage = 1;
        patients = null;
        patients = await Client.GetFromJsonAsync<PaginatedResultDTO<UserBasicDTO>>("api/users/patients/all/basic?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }

    async Task GetLast()
    {
        currentPage = patients.TotalPages;
        patients = null;
        patients = await Client.GetFromJsonAsync<PaginatedResultDTO<UserBasicDTO>>("api/users/patients/all/basic?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }

    async Task GetPrevious()
    {
        currentPage -= 1;
        patients = null;
        patients = await Client.GetFromJsonAsync<PaginatedResultDTO<UserBasicDTO>>("api/users/patients/all/basic?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }

    async Task GetNext()
    {
        currentPage += 1;
        patients = null;
        patients = await Client.GetFromJsonAsync<PaginatedResultDTO<UserBasicDTO>>("api/users/patients/all/basic?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }
}
