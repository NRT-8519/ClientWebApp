@page "/companies"
@using Blazored.LocalStorage;
@using ClientWebApp.Components.Tables
@using ClientWebApp.DTOs;
@using ClientWebApp.Features;

@inject HttpClient Client
@inject ILocalStorageService localStorage

<PageTitle>Companies - Admin</PageTitle>

<div class="container text-center justify-content-center align-items-center">
    <h1 class="display-4">Companies</h1>

    @if (companies == null || companies.items.Count == 0)
    {
        <SpinnerLoader />
    }
    else
    {
        <div class="text-center justify-content-center">
            <div class="row col-12 mb-3">
                <div class="input-group">
                    <input type="text" class="form-control" @bind-value="@searchString" placeholder="Type a search query..." aria-label="Type a search query..." aria-describedby="search-button">
                    <button class="btn btn-outline-primary" @onclick="InvokeSearch" type="button" id="search-button">Search</button>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-12">
                    <a href="new_company" class="btn btn-primary w-100">Add a new company</a>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-12">
                    <CompanyTable Companies="companies.items" Link="company_details" PageNumber="currentPage" PageSize="pageSize"/>
                </div>
            </div>
            <div class="row col-12 mb-3 justify-content-center">
                <div class="col-1">
                    <button disabled="@(!companies.HasPrevious)" type="button" @onclick="GetFirst" class="btn btn-primary w-100"><div class="bi bi-chevron-double-left"></div></button>
                </div>
                <div class="col-1">
                    <button disabled="@(!companies.HasPrevious)" type="button" @onclick="GetPrevious" class="btn btn-primary w-100"><div class="bi bi-chevron-left"></div></button>
                </div>
                <div class="col-1">
                    <button disabled="@(!companies.HasNext)" type="button" @onclick="GetNext" class="btn btn-primary w-100"><div class="bi bi-chevron-right"></div></button>
                </div>
                <div class="col-1">
                    <button disabled="@(!companies.HasNext)" type="button" @onclick="GetLast" class="btn btn-primary w-100"><div class="bi bi-chevron-double-right"></div></button>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private PaginatedResultDTO<CompanyDTO>? companies;

    int currentPage = 1;
    int pageSize = 10;
    string searchString = "";
    string currentFilter = "";

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        var claims = JwtParser.ParseClaimsFromJwt(token);

        companies = await Client.GetFromJsonAsync<PaginatedResultDTO<CompanyDTO>>("api/company/all?pageNumber=" + currentPage + "&pageSize=" + pageSize);
    }

    async Task InvokeSearch()
    {
        currentPage = 1;
        currentFilter = searchString;
        companies = null;
        companies = await Client.GetFromJsonAsync<PaginatedResultDTO<CompanyDTO>>("api/company/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&searchString=" + searchString);
    }

    async Task GetFirst()
    {
        currentPage = 1;
        companies = null;
        companies = await Client.GetFromJsonAsync<PaginatedResultDTO<CompanyDTO>>("api/company/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }

    async Task GetLast()
    {
        currentPage = companies.TotalPages;
        companies = null;
        companies = await Client.GetFromJsonAsync<PaginatedResultDTO<CompanyDTO>>("api/company/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }

    async Task GetPrevious()
    {
        currentPage -= 1;
        companies = null;
        companies = await Client.GetFromJsonAsync<PaginatedResultDTO<CompanyDTO>>("api/company/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }

    async Task GetNext()
    {
        currentPage += 1;
        companies = null;
        companies = await Client.GetFromJsonAsync<PaginatedResultDTO<CompanyDTO>>("api/company/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&currentFilter=" + currentFilter);
    }
}
