@page "/patient_details/{UUID}"
@using Blazored.LocalStorage;
@using ClientWebApp.DTOs;
@using ClientWebApp.Features;
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient Client
@inject ILocalStorageService localStorage

<div class="container text-center justify-content-center align-items-center mt-5">
    <h1 class="display-4 mb-5">Patient details</h1>
    @if (patient == null)
    {
        <SpinnerLoader/>
    }
    else
    {
        <div class="row text-center justify-content-center align-items-stretch mb-4">
            <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Name</h5>
                    <p class="card-text">
                        <strong>
                            @(patient.FirstName + " " + patient.MiddleName.First() + ". " + patient.LastName)
                        </strong>
                    </p>
                </div>
            </div>
            <div class="col-md-4 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Title</h5>
                    <p class="card-text">
                        <strong>
                            @(patient.Title == null ? "No title" : patient.Title)
                        </strong>
                    </p>
                </div>
            </div>
            <div class="col-md-2 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Gender</h5>
                    @if (patient.Gender == 'M')
                    {
                        <div class="bi bi-gender-male" style="font-size: 2rem; color: deepskyblue;" />
                    }
                    else if (patient.Gender == 'F')
                    {
                        <div class="bi bi-gender-female" style="font-size: 2rem; color: hotpink;" />
                    }
                    else
                    {
                        <div class="bi bi-gender-ambiguous" style="font-size: 2rem; color: mediumpurple;" />
                    }
                </div>
            </div>
        </div>
        <div class="row mb-4">
            <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Date of birth</h5>
                    <p class="card-text"><strong>@patient.DateOfBirth</strong></p>
                </div>
            </div>
            <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Social Security Number</h5>
                    <p class="card-text"><strong>@patient.SSN</strong></p>
                </div>

            </div>
        </div>
        <AuthorizeView Roles="ADMINISTRATOR">
            <Authorized>
                <div class="row mb-4">
                    <div class="col-md-12 col-sm-12 mb-md-0 mb-sm-3">
                        <div class="card card-body bg-light h-100">
                            <h5 class="card-title">Assigned doctor</h5>
                            @if (patient.AssignedDoctor == null)
                            {
                                <p class="card-text">
                                    <strong>
                                        Not yet assigned
                                    </strong>
                                </p>
                            }
                            else
                            {
                                <p class="card-text">
                                    <strong>
                                        @(patient.AssignedDoctor != null && patient.AssignedDoctor.UUID != Guid.Empty ? patient.AssignedDoctor.FirstName + " " + patient.AssignedDoctor.MiddleName.First() + ". " + patient.AssignedDoctor.LastName : "Not Assigned")
                                    </strong>
                                </p>
                            }
                        </div>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-12 mb-md-0 mb-sm-3">
                        <div class="card card-body bg-light h-100">
                            <h5 class="card-title">Username</h5>
                            <p class="card-text"><strong>@(patient.Username)</strong></p>
                        </div>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                        <div class="card card-body bg-light h-100">
                            <h5 class="card-title">Account status</h5>
                            <p class="card-text"><strong>@(patient.IsDisabled ? "Disabled" : patient.IsExpired ? "Expired password" : "Active")</strong></p>
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                        <div class="card card-body bg-light h-100">
                            <h5 class="card-title">Password expiry date and time</h5>
                            <p class="card-text"><strong>@patient.PasswordExpiryDate</strong></p>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
        
        
        <div class="row mb-4">
            <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Email</h5>
                    <p class="card-text"><a class="link-secondary" href="mailto:@(patient.Email)"><i class="bi bi-envelope" /> @patient.Email</a></p>

                </div>
            </div>
            <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                <div class="card card-body bg-light h-100">
                    <h5 class="card-title">Phone number</h5>
                    <p class="card-text"><a class="link-secondary" href="tel:@(patient.PhoneNumber)"><i class="bi bi-telephone" /> @patient.PhoneNumber</a></p>

                </div>
            </div>
        </div>
        <AuthorizeView Roles="ADMINISTRATOR">
            <Authorized>
                <div class="row mb-4">
                    <div class="col-md-12 col-sm-12 mb-md-0 mb-sm-3">
                        <div class="card card-body bg-light h-100">
                            <h5 class="card-title">Unique identifier</h5>
                            <p class="card-text"><strong>@patient.UUID</strong></p>
                        </div>
                    </div>
                </div>
            </Authorized>
        </AuthorizeView>
        <AuthorizeView Roles="ADMINISTRATOR">
            <Authorized>
                <div class="row mb-4">
                    <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                        <a href="edit_patient/@(patient.UUID)" class="btn btn-lg btn-warning w-100">
                            Edit
                        </a>
                    </div>
                    <div class="col-md-6 col-sm-12 mb-md-0 mb-sm-3">
                        <a href="patients" class="btn btn-lg btn-secondary w-100">
                            Back
                        </a>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="row mb-4">
                    <div class="col-12">
                        <a href="@("my_patients/" + JTI)" class="btn btn-lg btn-secondary w-100">
                            Back
                        </a>
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        
    }
</div>

@code {
    [ParameterAttribute]
    public string UUID { get; set; }

    public PatientDetailsDTO? patient;

    private string JTI;

    protected override async Task OnInitializedAsync()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        var claims = JwtParser.ParseClaimsFromJwt(token);

        JTI = claims.Single(c => c.Type.Equals("jti")).Value;

        //var result = await Client.GetAsync("api/users/patients/all/basic");
        patient = await Client.GetFromJsonAsync<PatientDetailsDTO>("api/users/patients/" + UUID);
    }
}
