@page "/edit_patient/{UUID}"
@using ClientWebApp.Components.Forms
@using ClientWebApp.DTOs;
@using System.Text.Json;
@using System.Text;
@using Microsoft.AspNetCore.Components;

@inject HttpClient Client
@inject NavigationManager NavigationManager

<div class="d-flex flex-column content text-center justify-content-center align-items-center">
    <h1 class="display-4 mt-1">Editing patient</h1>
    @if (patient == null || doctors == null) 
    {
        <SpinnerLoader/>
    }
    else
    {
        <EditForm Model="patient" OnValidSubmit="Execute" class="container">
            <DataAnnotationsValidator />
            <div class="row col-12 mb-4">
                <div class="col-12">
                    <div class="row">
                        <div class="col-md-3 col-sm-12">
                            <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.FirstName" Title="First Name" Label="First Name" Id="first_name" For="() => patient.FirstName" />
                        </div>
                        <div class="col-md-3 col-sm-12">
                            <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.MiddleName" Title="Middle Name" Label="Middle Name" Id="middle_name" For="() => patient.MiddleName" />

                        </div>
                        <div class="col-md-3 col-sm-12">
                            <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.LastName" Title="Last Name" Label="Last Name" Id="last_name" For="() => patient.LastName" />

                        </div>
                        <div class="col-md-3 col-sm-12">
                            <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.Title" Title="Title" Label="Title" Id="Title" For="() => patient.Title" />

                        </div>
                    </div>
                </div>
            </div>
            <div class="row col-12 mb-4">
                <div class="col-md-6 col-sm-12">
                    <GenderFormCard DisableInput="@DisableInput" @bind-Gender="@patient.Gender" ValidationForGender="() => patient.Gender" />
                </div>
                <div class="col-md-6 col-sm-12">
                    <DateOfBirthFormCard DisableInput="@DisableInput" @bind-DateOfBirth="@patient.DateOfBirth" For="() => patient.DateOfBirth" />
                </div>
            </div>
            <div class="row col-12 mb-4">
                <div class="col-12">
                    <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.Username" Title="Username" Label="Username" Id="username" For="() => patient.Username" />
                </div>
            </div>
            <div class="row col-12 mb-4">
                <div class="col-md-6 col-sm-12">
                    <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.Email" Title="Email" Label="Email" Id="email" For="() => patient.Email" />
                </div>
                <div class="col-md-6 col-sm-12">
                    <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.PhoneNumber" Title="Phone Number" Label="Phone Number" Id="phoneNumber" For="() => patient.PhoneNumber" />
                </div>
            </div>
            <div class="row col-12 mb-4">
                <div class="col-md-12 col-sm-12">
                    <TextInputCard DisableInput="@DisableInput" @bind-TextValue="@patient.SSN" Title="Social Security Number" Label="SSN" Id="ssn" For="() => patient.SSN" />
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-md-12 col-sm-12">
                    <div class="card card-body bg-light h-100">
                        <h4>Assigned Doctor</h4>
                        <div class="form-floating">
                            <InputSelect class="form-select" @bind-Value="DoctorUUID" id="doctor">
                                <option value="">Select a doctor...</option>
                                @foreach (var doctor in doctors)
                                {
                                    <option value="@doctor.UUID">Dr. @doctor.FirstName @doctor.LastName</option>
                                }
                            </InputSelect>
                            <label for="doctor">Doctor</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-md-6 col-sm-12">
                    <div class="card card-body bg-light h-100">
                        <h4>Password expiry date</h4>
                        <p class="card-text"><strong>@(patient.PasswordExpiryDate)</strong></p>
                    </div>
                </div>
                <div class="col-md-6 col-sm-12">
                    <div class="card card-body bg-light h-100">
                        <button disabled="@(DisableInput || patient.IsExpired)" type="button" @onclick="ForceExpireAccount" class="btn btn-lg btn-danger w-100 h-100">
                            Force password expiry
                        </button>
                    </div>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-md-12 col-sm-12">
                    <div class="card card-body bg-light h-100">
                        <h4>Unique Identifier</h4>
                        <p disabled class="card-text"><strong>@(patient.UUID)</strong></p>
                    </div>
                </div>
            </div>
            <div class="row col-12 mb-3">
                <div class="col-md-4 col-sm-12 mb-md-0 mb-sm-3">
                    <button disabled="@DisableInput" type="submit" class="btn btn-lg btn-primary w-100">
                        Save changes
                    </button>
                </div>
                <div class="col-md-4 col-sm-12 mb-md-0 mb-sm-3">
                    @if (patient.IsDisabled)
                    {
                        <button disabled="@DisableInput" type="button" @onclick="EnableAccount" class="btn btn-lg btn-success w-100">
                            Enable account
                        </button>
                    }
                    else
                    {
                        <button disabled="@DisableInput" type="button" @onclick="DisableAccount" class="btn btn-lg btn-danger w-100">
                            Disable account
                        </button>
                    }
                </div>
                <div class="col-md-4 col-sm-12 mb-md-0 mb-sm-3">
                    <a disabled="@DisableInput" href="patients" class="btn btn-lg btn-secondary w-100">
                        Discard changes
                    </a>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {

    [ParameterAttribute]
    public string UUID { get; set; }
    public bool DisableInput = false;
    public PatientDetailsDTO? patient;
    public List<DoctorDetailsDTO>? doctors;

    public string DoctorUUID = "";

    public async Task Execute()
    {
        DisableInput = true;

        if (!DoctorUUID.Equals(""))
        {
            if (patient.AssignedDoctor == null)
            {
                patient.AssignedDoctor = new UserBasicDTO() { UUID = Guid.Parse(DoctorUUID) };
            }
            else
            {
                patient.AssignedDoctor.UUID = Guid.Parse(DoctorUUID);
            }
        }

        await Client.PutAsJsonAsync("api/users/patients/edit", patient);

        NavigationManager.NavigateTo("/patient_details/" + UUID);
    }

    public async Task EnableAccount()
    {
        patient.IsDisabled = false;

        await Execute();
    }

    public async Task DisableAccount()
    {
        patient.IsDisabled = true;

        await Execute();
    }

    public async Task ForceExpireAccount()
    {
        patient.IsExpired = true;
        patient.PasswordExpiryDate = DateTime.Now;

        await Execute();
    }

    protected override async Task OnInitializedAsync()
    {
        patient = await Client.GetFromJsonAsync<PatientDetailsDTO>("api/users/patients/" + UUID);
        doctors = await Client.GetFromJsonAsync<List<DoctorDetailsDTO>>("api/users/doctors/all");

        if (patient.AssignedDoctor != null)
        {
            DoctorUUID = patient.AssignedDoctor.UUID.ToString();
        }
    }
}
