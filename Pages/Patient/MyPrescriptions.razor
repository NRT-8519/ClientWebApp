@page "/prescriptions/{UUID}"
@using ClientWebApp.Components.Tables
@using ClientWebApp.DTOs;

@inject HttpClient Client

<div class="container text-center justify-content-center align-items-center mt-5">
    <h4 class="display-4 mb-5">Prescriptions</h4>

    @if (prescriptions == null)
    {
        <SpinnerLoader/>
    }
    else if (prescriptions.items.Count == 0)
    {
        <h4 class="mb-4">No prescriptions</h4>
    }
    else
    {
        <div class="row col-12 mb-3">
            <div class="col-12">
                <PrescriptionsSimpleTable prescriptions="prescriptions.items" />
            </div>
        </div>
        <div class="row col-12 mb-3 justify-content-center">
            <div class="col-1">
                <button disabled="@(!prescriptions.HasPrevious)" type="button" @onclick="GetFirst" class="btn btn-primary w-100"><div class="bi bi-chevron-double-left"></div></button>
            </div>
            <div class="col-1">
                <button disabled="@(!prescriptions.HasPrevious)" type="button" @onclick="GetPrevious" class="btn btn-primary w-100"><div class="bi bi-chevron-left"></div></button>
            </div>
            <div class="col-1">
                <button disabled="@(!prescriptions.HasNext)" type="button" @onclick="GetNext" class="btn btn-primary w-100"><div class="bi bi-chevron-right"></div></button>
            </div>
            <div class="col-1">
                <button disabled="@(!prescriptions.HasNext)" type="button" @onclick="GetLast" class="btn btn-primary w-100"><div class="bi bi-chevron-double-right"></div></button>
            </div>
        </div>
    }
</div>

@code {
    [ParameterAttribute]
    public string UUID { get; set; }

    public PaginatedResultDTO<PrescriptionDTO> prescriptions;

    int currentPage = 1;
    int pageSize = 10;

    async Task GetFirst()
    {
        currentPage = 1;
        prescriptions = null;
        prescriptions = await Client.GetFromJsonAsync<PaginatedResultDTO<PrescriptionDTO>>("api/prescription/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&patient=" + UUID);
    }

    async Task GetLast()
    {
        currentPage = prescriptions.TotalPages;
        prescriptions = null;
        prescriptions = await Client.GetFromJsonAsync<PaginatedResultDTO<PrescriptionDTO>>("api/prescription/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&patient=" + UUID);
    }

    async Task GetPrevious()
    {
        currentPage -= 1;
        prescriptions = null;
        prescriptions = await Client.GetFromJsonAsync<PaginatedResultDTO<PrescriptionDTO>>("api/prescription/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&patient=" + UUID);
    }

    async Task GetNext()
    {
        currentPage += 1;
        prescriptions = null;
        prescriptions = await Client.GetFromJsonAsync<PaginatedResultDTO<PrescriptionDTO>>("api/prescription/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&patient=" + UUID);
    }

    protected override async Task OnInitializedAsync()
    {
        var result = await Client.GetFromJsonAsync<PaginatedResultDTO<PrescriptionDTO>>("api/prescription/all?pageNumber=" + currentPage + "&pageSize=" + pageSize + "&patient=" + UUID);
        prescriptions = result;
    }
}
